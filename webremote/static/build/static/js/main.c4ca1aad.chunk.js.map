{"version":3,"sources":["../external \"PropTypes\"","../external \"React\"","../external \"ObjectAssign\"","Indicator.tsx","Toggle.tsx","Remote.tsx","Client.ts","Drawer.tsx","Chart.tsx","App.tsx","index.tsx","../external \"reactLifecyclesCompat\"","../external \"ReactDOM\""],"names":["module","exports","PropTypes","React","ObjectAssign","Indicator","label","value","unit","className","Toggle","children","Button","id","onChange","checked","type","e","target","htmlFor","Remote","onPowerChange","onModeChange","onFanSpeedChange","onTemperatureChange","state","power","mode","fan_speed","temperature","minTemp","useState","current_temperature","setTemperatureState","min","max","onAfterChange","trackStyle","backgroundColor","height","railStyle","handleStyle","border","width","marginLeft","marginTop","Client","url_base","endpoint","json","url","this","options","method","headers","body","JSON","stringify","fetch","_post","speed","result","length","START_STATE","Drawer","isOpen","setOpen","onClick","Chart","full_history","history","d3Container","useRef","timeSpan","setTimeSpan","useEffect","cutoff","Date","getTime","filter","h","timestamp","sort","h1","h2","Math","map","t","maxTemp","minHumidity","humidity","maxHumidity","minDate","maxDate","margin","d3","current","select","remove","svg","attr","append","humidityScale","domain","range","temperatureScale","timeScale","style","call","selectAll","ticks","path1","x","y","datum","path2","text","ref","client","App","remoteState","setRemoteState","loading","setLoading","setCurrent","setHistory","a","get_history","then","remote","sensor","condition","on","off","fan","ReactDOM","render","document","getElementById","reactLifecyclesCompat"],"mappings":"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","file":"static/js/main.c4ca1aad.chunk.js","sourcesContent":["module.exports = PropTypes;","module.exports = React;","module.exports = ObjectAssign;","import React from \"react\";\r\nimport \"./Indicator.css\";\r\n\r\nconst Indicator: React.FC<{\r\n  label: string;\r\n  value: any;\r\n  unit: string;\r\n}> = ({ label, value, unit }) => {\r\n  return (\r\n    <div className=\"Indicator\">\r\n      <span className=\"Label\">{label}</span>\r\n      <span className=\"Value\">\r\n        <span>{value}</span>\r\n        <span className=\"Unit\">{unit}</span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicator;\r\n","import * as React from \"react\";\r\nimport PropTypes, { InferProps } from \"prop-types\";\r\nimport \"./Toggle.css\";\r\n\r\nexport default function Toggle({\r\n  children,\r\n  className\r\n}: InferProps<typeof Toggle.propTypes>) {\r\n  return <div className={`Toggle ${className || ''}`}>{children}</div>;\r\n}\r\n\r\nToggle.propTypes = {\r\n  children: PropTypes.any,\r\n  className: PropTypes.string\r\n};\r\n\r\nfunction Option({\r\n  id,\r\n  value,\r\n  children,\r\n  onChange,\r\n  checked\r\n}: InferProps<typeof Option.propTypes>) {\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"radio\"\r\n        value={value}\r\n        checked={checked || false}\r\n        onChange={e => {\r\n          if (e.target.checked) {\r\n            onChange(value);\r\n          }\r\n        }}\r\n        id={id}\r\n        className=\"Toggle-Option-Radio\"\r\n      />\r\n      <label htmlFor={id} className=\"Toggle-Option\">\r\n        {children}\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n  children: PropTypes.any,\r\n  onChange: PropTypes.func.isRequired,\r\n  checked: PropTypes.bool\r\n};\r\n\r\nToggle.Button = Option;\r\n","import React, { useState } from 'react';\nimport './Remote.css';\nimport Toggle from './Toggle';\nimport { RemoteMode, RemoteFanSpeed, RemoteState } from './Client';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nexport const ACTION_PWR = 'power';\nexport const ACTION_MODE = 'mode';\n\nconst Remote: React.FC<{\n    onPowerChange: (power: boolean) => void;\n    onModeChange: (mode: RemoteMode) => void;\n    onFanSpeedChange: (fan_speed: RemoteFanSpeed) => void;\n    onTemperatureChange: (temperature: number) => void;\n    state: RemoteState;\n}> = ({\n    onPowerChange,\n    onModeChange,\n    onFanSpeedChange,\n    onTemperatureChange,\n    state,\n}) => {\n    const { power, mode, fan_speed, temperature } = state;\n    const minTemp = mode === 'heater' ? 20 : 22;\n    const maxTemp = 30;\n    const [current_temperature, setTemperatureState] = useState(temperature);\n\n    return (\n        <>\n            <Toggle className=\"Option-row\">\n                <Toggle.Button\n                    id=\"pwr-on\"\n                    value={true}\n                    checked={power}\n                    onChange={onPowerChange}\n                >\n                    On\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"pwr-off\"\n                    value={false}\n                    checked={!power}\n                    onChange={onPowerChange}\n                >\n                    Off\n                </Toggle.Button>\n            </Toggle>\n\n            <Toggle className=\"Option-row\">\n                <Toggle.Button\n                    id=\"mode-auto\"\n                    value={'auto'}\n                    checked={mode === 'auto'}\n                    onChange={onModeChange}\n                >\n                    Auto\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"mode-cooler\"\n                    value={'cooler'}\n                    checked={mode === 'cooler'}\n                    onChange={onModeChange}\n                >\n                    <i className=\"far fa-snowflake\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"mode-heater\"\n                    value={'heater'}\n                    checked={mode === 'heater'}\n                    onChange={onModeChange}\n                >\n                    <i className=\"fas fa-sun\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"mode-dry\"\n                    value={'dry'}\n                    checked={mode === 'dry'}\n                    onChange={onModeChange}\n                >\n                    Dry\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"mode-fan\"\n                    value={'fan'}\n                    checked={mode === 'fan'}\n                    onChange={onModeChange}\n                >\n                    <i className=\"fas fa-fan small\"></i>\n                </Toggle.Button>\n            </Toggle>\n\n            <Toggle className=\"Option-row\">\n                <Toggle.Button\n                    id=\"speed-auto\"\n                    value={'auto'}\n                    checked={fan_speed === 'auto'}\n                    onChange={onFanSpeedChange}\n                >\n                    Auto\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"speed-high\"\n                    value={'high'}\n                    checked={fan_speed === 'high'}\n                    onChange={onFanSpeedChange}\n                >\n                    <i className=\"fas fa-fan\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"speed-low\"\n                    value={'low'}\n                    checked={fan_speed === 'low'}\n                    onChange={onFanSpeedChange}\n                >\n                    <i className=\"fas fa-fan small\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"speed-quiet\"\n                    value={'quiet'}\n                    checked={fan_speed === 'quiet'}\n                    onChange={onFanSpeedChange}\n                >\n                    <i className=\"fas fa-volume-mute\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"speed-natural\"\n                    value={'natural'}\n                    checked={fan_speed === 'natural'}\n                    onChange={onFanSpeedChange}\n                >\n                    <i className=\"fas fa-tree\"></i>\n                </Toggle.Button>\n            </Toggle>\n\n            <div className=\"Option-row Option-row_slider\">\n                <Slider\n                    min={minTemp}\n                    max={maxTemp}\n                    value={current_temperature}\n                    onChange={setTemperatureState}\n                    onAfterChange={onTemperatureChange}\n                    trackStyle={{ backgroundColor: 'transparent', height: 6 }}\n                    railStyle={{\n                        backgroundColor: '#106d82',\n                        height: 6,\n                    }}\n                    handleStyle={{\n                        border: '1px solid #106d82',\n                        height: 20,\n                        width: 20,\n                        marginLeft: 0,\n                        marginTop: -7,\n                        backgroundColor: 'white',\n                    }}\n                />\n                <div className=\"Target-temperature\">\n                    {current_temperature}°C\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Remote;\n","export default class Client {\r\n    url_base = '/api/';\r\n\r\n    _post(endpoint: string, json?: any) {\r\n        let url = this.url_base + endpoint;\r\n        let options: any = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n            },\r\n        };\r\n\r\n        if (json) {\r\n            options.body = JSON.stringify(json);\r\n        }\r\n\r\n        fetch(url, options);\r\n    }\r\n\r\n    off() {\r\n        this._post('off');\r\n    }\r\n\r\n    on() {\r\n        this._post('on');\r\n    }\r\n\r\n    mode(mode: RemoteMode) {\r\n        this._post('mode', { mode });\r\n    }\r\n\r\n    fan(speed: RemoteFanSpeed) {\r\n        this._post('fan', { speed });\r\n    }\r\n\r\n    temperature(temperature: number) {\r\n        this._post('temperature', { temperature });\r\n    }\r\n\r\n    async history() {\r\n        const result = await fetch(this.url_base + 'sensor');\r\n        return (await result.json()) as History;\r\n    }\r\n\r\n    async sensor() {\r\n        const result = await fetch(this.url_base + 'sensor');\r\n        const json = await result.json();\r\n        if (json.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return json[0] as CurrentCondition;\r\n    }\r\n\r\n    async state() {\r\n        const result = await fetch(this.url_base + 'state');\r\n        return (await result.json()) as RemoteState;\r\n    }\r\n}\r\n\r\nexport type RemoteMode = 'auto' | 'heater' | 'cooler' | 'dry' | 'fan';\r\nexport type RemoteFanSpeed = 'auto' | 'high' | 'low' | 'quiet' | 'natural';\r\n\r\nexport type RemoteState = {\r\n    mode: RemoteMode;\r\n    power: boolean;\r\n    fan_speed: RemoteFanSpeed;\r\n    temperature: number;\r\n};\r\n\r\nexport const START_STATE: RemoteState = {\r\n    mode: 'auto',\r\n    power: false,\r\n    fan_speed: 'auto',\r\n    temperature: 25,\r\n};\r\n\r\nexport type Condition = {\r\n    temperature: number;\r\n    humidity: number;\r\n    timestamp: number;\r\n};\r\n\r\nexport type CurrentCondition = {\r\n    temperature: number;\r\n    humidity: number;\r\n};\r\n\r\nexport type History = Condition[];\r\n","import React, { useState, ReactNode } from 'react';\r\nimport './Drawer.css';\r\n\r\nconst Drawer: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    return (\r\n        <div className=\"Drawer\">\r\n            <div className={'Drawer-Content ' + (isOpen ? 'Open' : '')}>\r\n                {children}\r\n            </div>\r\n            <button className=\"Drawer-Button\" onClick={() => setOpen(!isOpen)}>\r\n                {isOpen ? (\r\n                    <i className=\"fa fa-chevron-up\" />\r\n                ) : (\r\n                    <i className=\"fa fa-chevron-down\" />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Drawer;\r\n","import React, { useEffect, useRef, useState } from 'react';\nimport { History, Condition } from './Client';\nimport './Chart.css';\nimport * as d3 from 'd3';\n\nconst Chart: React.FC<{ history: History }> = ({ history: full_history }) => {\n    const d3Container = useRef(null);\n    const [timeSpan, setTimeSpan] = useState(24 * 3600);\n\n    useEffect(() => {\n        const cutoff = new Date().getTime() / 1000 - timeSpan;\n        const history = full_history\n            .filter(h => h.timestamp >= cutoff)\n            .sort((h1, h2) => h1.timestamp - h2.timestamp);\n        const minTemp = Math.min(...history.map(t => t.temperature)) - 2;\n        const maxTemp = Math.max(...history.map(t => t.temperature)) + 2;\n        const minHumidity = Math.min(...history.map(t => t.humidity)) - 5;\n        const maxHumidity = Math.max(...history.map(t => t.humidity)) + 5;\n        const minDate = Math.min(...history.map(t => t.timestamp));\n        const maxDate = Math.max(...history.map(t => t.timestamp));\n        const margin = { top: 20, right: 100, bottom: 100, left: 100 },\n            width = 600 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n        d3.select(d3Container.current)\n            .select('*')\n            .remove();\n\n        const svg = d3\n            .select(d3Container.current)\n            .attr(\n                'viewBox',\n                `0 0 ${width + margin.left + margin.right} ${height +\n                    margin.top +\n                    margin.bottom}`\n            )\n            .append('g')\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        const humidityScale = d3\n            .scaleLinear()\n            .domain([minHumidity, maxHumidity])\n            .range([height, 0]);\n\n        const temperatureScale = d3\n            .scaleLinear()\n            .domain([minTemp, maxTemp])\n            .range([height, 0]);\n\n        const timeScale = d3\n            .scaleTime()\n            .domain([new Date(minDate * 1000), new Date(maxDate * 1000)])\n            .range([0, width]);\n\n        svg.append('g')\n            .attr('transform', `translate(0,${height})`)\n            .attr('class', 'axis')\n            .style('text-anchor', 'end')\n            .call(d3.axisBottom(timeScale))\n            .selectAll('text')\n            .attr('transform', 'translate(-10,10)rotate(-45)');\n        svg.append('g')\n            .attr('class', 'axis')\n            .call(d3.axisLeft(temperatureScale).ticks(7));\n        svg.append('g')\n            .attr('class', 'axis')\n            .attr('transform', `translate(${width},0)`)\n            .call(d3.axisRight(humidityScale).ticks(5));\n\n        const path1 = d3\n            .line<Condition>()\n            .x(h => timeScale(new Date(h.timestamp * 1000)))\n            .y(h => temperatureScale(h.temperature));\n        svg.append('path')\n            .datum(history)\n            .attr('class', 'Chart_ts-1')\n            .attr('d', path1);\n\n        const path2 = d3\n            .line<Condition>()\n            .x(h => timeScale(new Date(h.timestamp * 1000)))\n            .y(h => humidityScale(h.humidity));\n        svg.append('path')\n            .datum(history)\n            .attr('class', 'Chart_ts-2')\n            .attr('d', path2);\n\n        svg.append('text')\n            .attr('text-anchor', 'middle')\n            .attr('transform', 'rotate(-90)')\n            .attr('font-size', '30px')\n            .attr('y', -margin.left + 40)\n            .attr('x', -height / 2)\n            .attr('fill', 'red')\n            .text('Temperature');\n\n        svg.append('text')\n            .attr('text-anchor', 'middle')\n            .attr('transform', 'rotate(90)')\n            .attr('font-size', '30px')\n            .attr('y', -width - margin.right + 40)\n            .attr('x', height / 2)\n            .attr('fill', 'steelblue')\n            .text('Humidity');\n    }, [full_history, timeSpan]);\n\n    return (\n        <>\n            <svg className=\"Chart\" ref={d3Container} />\n            <div className=\"Chart\">\n                <button onClick={() => setTimeSpan(6 * 3600)}>6h</button>\n                <button onClick={() => setTimeSpan(24 * 3600)}>1d</button>\n                <button onClick={() => setTimeSpan(2 * 24 * 3600)}>2d</button>\n                <button onClick={() => setTimeSpan(7 * 24 * 3600)}>1w</button>\n            </div>\n        </>\n    );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Indicator from './Indicator';\nimport Remote from './Remote';\nimport Client, {\n    RemoteMode,\n    START_STATE,\n    RemoteFanSpeed,\n    CurrentCondition,\n    History,\n} from './Client';\nimport Drawer from './Drawer';\nimport Chart from './Chart';\n\nconst client = new Client();\n\nconst App: React.FC = () => {\n    const [remoteState, setRemoteState] = useState(START_STATE);\n    const [loading, setLoading] = useState(true);\n    const [current, setCurrent] = useState<null | CurrentCondition>(null);\n    const [history, setHistory] = useState<History>([]);\n\n    useEffect(() => {\n        async function get_history() {\n            const history = await client.history();\n            setHistory(history);\n        }\n\n        get_history();\n    }, []);\n\n    function onPowerChange(power: boolean) {\n        if (power) {\n            client.on();\n        } else {\n            client.off();\n        }\n\n        setRemoteState(state => ({\n            ...state,\n            power,\n        }));\n    }\n\n    function onModeChange(mode: RemoteMode) {\n        client.mode(mode);\n\n        setRemoteState(state => ({\n            ...state,\n            mode,\n        }));\n    }\n\n    function onSpeedChange(speed: RemoteFanSpeed) {\n        client.fan(speed);\n\n        setRemoteState(state => ({\n            ...state,\n            fan_speed: speed,\n        }));\n    }\n\n    function onTemperatureChange(temperature: number) {\n        client.temperature(temperature);\n\n        setRemoteState(state => ({\n            ...state,\n            temperature: temperature,\n        }));\n    }\n\n    useEffect(() => {\n        client.state().then(remote => {\n            setRemoteState(remote);\n\n            client.sensor().then(condition => {\n                setCurrent(condition);\n            });\n\n            setLoading(false);\n        });\n    }, []);\n\n    if (loading) {\n        return <div>Please wait</div>;\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"Indicators\">\n                    <Indicator\n                        label=\"Temperature\"\n                        value={current ? current.temperature : 'N/A'}\n                        unit=\"°C\"\n                    />\n                    <Indicator\n                        label=\"Humidity\"\n                        value={current ? current.humidity : 'N/A'}\n                        unit=\"%\"\n                    />\n                </div>\n            </header>\n            <main className=\"App-main\">\n                <Drawer>\n                    {history.length === 0 ? (\n                        'Collecting data...'\n                    ) : (\n                        <Chart history={history} />\n                    )}\n                </Drawer>\n                <Remote\n                    onPowerChange={onPowerChange}\n                    onModeChange={onModeChange}\n                    onFanSpeedChange={onSpeedChange}\n                    onTemperatureChange={onTemperatureChange}\n                    state={remoteState}\n                ></Remote>\n            </main>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = reactLifecyclesCompat;","module.exports = ReactDOM;"],"sourceRoot":""}