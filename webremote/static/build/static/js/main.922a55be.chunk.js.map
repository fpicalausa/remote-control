{"version":3,"sources":["../external \"PropTypes\"","../external \"React\"","../external \"ReactDOM\"","../external \"ObjectAssign\"","../external \"reactLifecyclesCompat\"","Indicator.tsx","Toggle.tsx","Remote.tsx","Client.ts","Drawer.tsx","Chart.tsx","App.tsx","index.tsx"],"names":["module","exports","PropTypes","React","ReactDOM","ObjectAssign","reactLifecyclesCompat","Indicator","label","value","unit","className","Toggle","children","Button","id","onChange","checked","type","e","target","htmlFor","Remote","onPowerChange","onModeChange","onFanSpeedChange","onTemperatureChange","state","power","mode","fan_speed","temperature","minTemp","useState","current_temperature","setTemperatureState","min","max","onAfterChange","trackStyle","backgroundColor","height","railStyle","handleStyle","border","width","marginLeft","marginTop","Client","url_base","endpoint","json","url","this","options","method","headers","body","JSON","stringify","fetch","_post","speed","result","length","START_STATE","Drawer","isOpen","setOpen","onClick","CustomizedAxisTick","x","y","payload","stroke","transform","dy","textAnchor","fill","moment","local","format","Chart","history","Math","map","t","maxTemp","minHumidity","humidity","maxHumidity","data","sort","h1","h2","timestamp","margin","top","left","right","strokeDasharray","strokeOpacity","dataKey","minTickGap","tickCount","tick","yAxisId","domain","angle","position","style","orientation","strokeWidth","isAnimationActive","dot","client","App","remoteState","setRemoteState","loading","setLoading","current","setCurrent","setHistory","useEffect","a","get_history","then","remote","sensor","condition","on","off","fan","render","document","getElementById"],"mappings":"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","file":"static/js/main.922a55be.chunk.js","sourcesContent":["module.exports = PropTypes;","module.exports = React;","module.exports = ReactDOM;","module.exports = ObjectAssign;","module.exports = reactLifecyclesCompat;","import React from \"react\";\r\nimport \"./Indicator.css\";\r\n\r\nconst Indicator: React.FC<{\r\n  label: string;\r\n  value: any;\r\n  unit: string;\r\n}> = ({ label, value, unit }) => {\r\n  return (\r\n    <div className=\"Indicator\">\r\n      <span className=\"Label\">{label}</span>\r\n      <span className=\"Value\">\r\n        <span>{value}</span>\r\n        <span className=\"Unit\">{unit}</span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicator;\r\n","import * as React from \"react\";\r\nimport PropTypes, { InferProps } from \"prop-types\";\r\nimport \"./Toggle.css\";\r\n\r\nexport default function Toggle({\r\n  children,\r\n  className\r\n}: InferProps<typeof Toggle.propTypes>) {\r\n  return <div className={`Toggle ${className || ''}`}>{children}</div>;\r\n}\r\n\r\nToggle.propTypes = {\r\n  children: PropTypes.any,\r\n  className: PropTypes.string\r\n};\r\n\r\nfunction Option({\r\n  id,\r\n  value,\r\n  children,\r\n  onChange,\r\n  checked\r\n}: InferProps<typeof Option.propTypes>) {\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"radio\"\r\n        value={value}\r\n        checked={checked || false}\r\n        onChange={e => {\r\n          if (e.target.checked) {\r\n            onChange(value);\r\n          }\r\n        }}\r\n        id={id}\r\n        className=\"Toggle-Option-Radio\"\r\n      />\r\n      <label htmlFor={id} className=\"Toggle-Option\">\r\n        {children}\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n  children: PropTypes.any,\r\n  onChange: PropTypes.func.isRequired,\r\n  checked: PropTypes.bool\r\n};\r\n\r\nToggle.Button = Option;\r\n","import React, { useState } from 'react';\nimport './Remote.css';\nimport Toggle from './Toggle';\nimport { RemoteMode, RemoteFanSpeed, RemoteState } from './Client';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nexport const ACTION_PWR = 'power';\nexport const ACTION_MODE = 'mode';\n\nconst Remote: React.FC<{\n    onPowerChange: (power: boolean) => void;\n    onModeChange: (mode: RemoteMode) => void;\n    onFanSpeedChange: (fan_speed: RemoteFanSpeed) => void;\n    onTemperatureChange: (temperature: number) => void;\n    state: RemoteState;\n}> = ({\n    onPowerChange,\n    onModeChange,\n    onFanSpeedChange,\n    onTemperatureChange,\n    state,\n}) => {\n    const { power, mode, fan_speed, temperature } = state;\n    const minTemp = mode === 'heater' ? 20 : 22;\n    const maxTemp = 30;\n    const [current_temperature, setTemperatureState] = useState(temperature);\n\n    return (\n        <>\n            <Toggle className=\"Option-row\">\n                <Toggle.Button\n                    id=\"pwr-on\"\n                    value={true}\n                    checked={power}\n                    onChange={onPowerChange}\n                >\n                    On\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"pwr-off\"\n                    value={false}\n                    checked={!power}\n                    onChange={onPowerChange}\n                >\n                    Off\n                </Toggle.Button>\n            </Toggle>\n\n            <Toggle className=\"Option-row\">\n                <Toggle.Button\n                    id=\"mode-auto\"\n                    value={'auto'}\n                    checked={mode === 'auto'}\n                    onChange={onModeChange}\n                >\n                    Auto\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"mode-cooler\"\n                    value={'cooler'}\n                    checked={mode === 'cooler'}\n                    onChange={onModeChange}\n                >\n                    <i className=\"far fa-snowflake\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"mode-heater\"\n                    value={'heater'}\n                    checked={mode === 'heater'}\n                    onChange={onModeChange}\n                >\n                    <i className=\"fas fa-sun\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"mode-dry\"\n                    value={'dry'}\n                    checked={mode === 'dry'}\n                    onChange={onModeChange}\n                >\n                    Dry\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"mode-fan\"\n                    value={'fan'}\n                    checked={mode === 'fan'}\n                    onChange={onModeChange}\n                >\n                    <i className=\"fas fa-fan small\"></i>\n                </Toggle.Button>\n            </Toggle>\n\n            <Toggle className=\"Option-row\">\n                <Toggle.Button\n                    id=\"speed-auto\"\n                    value={'auto'}\n                    checked={fan_speed === 'auto'}\n                    onChange={onFanSpeedChange}\n                >\n                    Auto\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"speed-high\"\n                    value={'high'}\n                    checked={fan_speed === 'high'}\n                    onChange={onFanSpeedChange}\n                >\n                    <i className=\"fas fa-fan\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"speed-low\"\n                    value={'low'}\n                    checked={fan_speed === 'low'}\n                    onChange={onFanSpeedChange}\n                >\n                    <i className=\"fas fa-fan small\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"speed-quiet\"\n                    value={'quiet'}\n                    checked={fan_speed === 'quiet'}\n                    onChange={onFanSpeedChange}\n                >\n                    <i className=\"fas fa-volume-mute\"></i>\n                </Toggle.Button>\n                <Toggle.Button\n                    id=\"speed-natural\"\n                    value={'natural'}\n                    checked={fan_speed === 'natural'}\n                    onChange={onFanSpeedChange}\n                >\n                    <i className=\"fas fa-tree\"></i>\n                </Toggle.Button>\n            </Toggle>\n\n            <div className=\"Option-row Option-row_slider\">\n                <Slider\n                    min={minTemp}\n                    max={maxTemp}\n                    value={current_temperature}\n                    onChange={setTemperatureState}\n                    onAfterChange={onTemperatureChange}\n                    trackStyle={{ backgroundColor: 'transparent', height: 6 }}\n                    railStyle={{\n                        backgroundColor: '#106d82',\n                        height: 6,\n                    }}\n                    handleStyle={{\n                        border: '1px solid #106d82',\n                        height: 20,\n                        width: 20,\n                        marginLeft: 0,\n                        marginTop: -7,\n                        backgroundColor: 'white',\n                    }}\n                />\n                <div className=\"Target-temperature\">\n                    {current_temperature}°C\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Remote;\n","export default class Client {\r\n    url_base = '/api/';\r\n\r\n    _post(endpoint: string, json?: any) {\r\n        let url = this.url_base + endpoint;\r\n        let options: any = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n            },\r\n        };\r\n\r\n        if (json) {\r\n            options.body = JSON.stringify(json);\r\n        }\r\n\r\n        fetch(url, options);\r\n    }\r\n\r\n    off() {\r\n        this._post('off');\r\n    }\r\n\r\n    on() {\r\n        this._post('on');\r\n    }\r\n\r\n    mode(mode: RemoteMode) {\r\n        this._post('mode', { mode });\r\n    }\r\n\r\n    fan(speed: RemoteFanSpeed) {\r\n        this._post('fan', { speed });\r\n    }\r\n\r\n    temperature(temperature: number) {\r\n        this._post('temperature', { temperature });\r\n    }\r\n\r\n    async history() {\r\n        const result = await fetch(this.url_base + 'sensor');\r\n        return (await result.json()) as History;\r\n    }\r\n\r\n    async sensor() {\r\n        const result = await fetch(this.url_base + 'sensor');\r\n        const json = await result.json();\r\n        if (json.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return json[0] as CurrentCondition;\r\n    }\r\n\r\n    async state() {\r\n        return START_STATE;\r\n        const result = await fetch(this.url_base + 'state');\r\n        return (await result.json()) as RemoteState;\r\n    }\r\n}\r\n\r\nexport type RemoteMode = 'auto' | 'heater' | 'cooler' | 'dry' | 'fan';\r\nexport type RemoteFanSpeed = 'auto' | 'high' | 'low' | 'quiet' | 'natural';\r\n\r\nexport type RemoteState = {\r\n    mode: RemoteMode;\r\n    power: boolean;\r\n    fan_speed: RemoteFanSpeed;\r\n    temperature: number;\r\n};\r\n\r\nexport const START_STATE: RemoteState = {\r\n    mode: 'auto',\r\n    power: false,\r\n    fan_speed: 'auto',\r\n    temperature: 25,\r\n};\r\n\r\nexport type CurrentCondition = {\r\n    temperature: number;\r\n    humidity: number;\r\n};\r\n\r\nexport type History = {\r\n    temperature: number;\r\n    humidity: number;\r\n    timestamp: number;\r\n}[];\r\n","import React, { useState, ReactNode } from 'react';\r\nimport './Drawer.css';\r\n\r\nconst Drawer: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    return (\r\n        <div className=\"Drawer\">\r\n            <div className={'Drawer-Content ' + (isOpen ? 'Open' : '')}>\r\n                {children}\r\n            </div>\r\n            <button className=\"Drawer-Button\" onClick={() => setOpen(!isOpen)}>\r\n                {isOpen ? (\r\n                    <i className=\"fa fa-chevron-up\" />\r\n                ) : (\r\n                    <i className=\"fa fa-chevron-down\" />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Drawer;\r\n","import React from 'react';\nimport { History } from './Client';\nimport './Chart.css';\nimport moment from 'moment';\n\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    ResponsiveContainer,\n    CartesianGrid,\n} from 'recharts';\n\nconst CustomizedAxisTick: React.FC<{\n    x: number;\n    y: number;\n    stroke: any;\n    payload: { value: any };\n}> = ({ x, y, stroke, payload }) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <text\n                x={0}\n                y={-8}\n                dy={16}\n                textAnchor=\"end\"\n                fill=\"#666\"\n                transform=\"rotate(-45)\"\n            >\n                {moment(payload.value * 1000)\n                    .local()\n                    .format('DD-MM HH:mm')}\n            </text>\n        </g>\n    );\n};\n\nconst Chart: React.FC<{ history: History }> = ({ history }) => {\n    const minTemp = Math.min(...history.map(t => t.temperature));\n    const maxTemp = Math.max(...history.map(t => t.temperature));\n    const minHumidity = Math.min(...history.map(t => t.humidity));\n    const maxHumidity = Math.max(...history.map(t => t.humidity));\n\n    return (\n        <ResponsiveContainer className=\"Chart\">\n            <LineChart\n                data={history.sort((h1, h2) => h1.timestamp - h2.timestamp)}\n                margin={{\n                    top: 60,\n                    left: 10,\n                    right: 10,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"10 10\" strokeOpacity=\"0.2\" />\n                <XAxis\n                    dataKey=\"timestamp\"\n                    minTickGap={0}\n                    tickCount={5}\n                    tick={CustomizedAxisTick}\n                    height={100}\n                />\n                <YAxis\n                    yAxisId=\"temperature\"\n                    domain={[minTemp - 2, maxTemp + 2]}\n                    label={{\n                        value: 'Temperature',\n                        angle: -90,\n                        position: 'insideLeft',\n                        fill: '#cf2d2d',\n                        style: {\n                            textAnchor: 'middle',\n                        },\n                    }}\n                ></YAxis>\n                <YAxis\n                    yAxisId=\"humidity\"\n                    orientation=\"right\"\n                    domain={[minHumidity - 2, maxHumidity + 2]}\n                    label={{\n                        value: 'Humidity',\n                        angle: 90,\n                        position: 'insideRight',\n                        fill: '#7a7391',\n                        style: {\n                            textAnchor: 'middle',\n                        },\n                    }}\n                />\n                <Line\n                    yAxisId=\"temperature\"\n                    type=\"monotone\"\n                    dataKey=\"temperature\"\n                    strokeWidth={2}\n                    stroke=\"#cf2d2d\"\n                    isAnimationActive={false}\n                    dot={false}\n                />\n                <Line\n                    yAxisId=\"humidity\"\n                    type=\"monotone\"\n                    dataKey=\"humidity\"\n                    strokeWidth={2}\n                    stroke=\"#7a7391\"\n                    dot={false}\n                    isAnimationActive={false}\n                />\n            </LineChart>\n        </ResponsiveContainer>\n    );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Indicator from './Indicator';\nimport Remote from './Remote';\nimport Client, {\n    RemoteMode,\n    START_STATE,\n    RemoteFanSpeed,\n    CurrentCondition,\n    History,\n} from './Client';\nimport Drawer from './Drawer';\nimport Chart from './Chart';\n\nconst client = new Client();\n\nconst App: React.FC = () => {\n    const [remoteState, setRemoteState] = useState(START_STATE);\n    const [loading, setLoading] = useState(true);\n    const [current, setCurrent] = useState<null | CurrentCondition>(null);\n    const [history, setHistory] = useState<History>([]);\n\n    useEffect(() => {\n        async function get_history() {\n            const history = await client.history();\n            setHistory(history);\n        }\n\n        get_history();\n    }, []);\n\n    function onPowerChange(power: boolean) {\n        if (power) {\n            client.on();\n        } else {\n            client.off();\n        }\n\n        setRemoteState(state => ({\n            ...state,\n            power,\n        }));\n    }\n\n    function onModeChange(mode: RemoteMode) {\n        client.mode(mode);\n\n        setRemoteState(state => ({\n            ...state,\n            mode,\n        }));\n    }\n\n    function onSpeedChange(speed: RemoteFanSpeed) {\n        client.fan(speed);\n\n        setRemoteState(state => ({\n            ...state,\n            fan_speed: speed,\n        }));\n    }\n\n    function onTemperatureChange(temperature: number) {\n        client.temperature(temperature);\n\n        setRemoteState(state => ({\n            ...state,\n            temperature: temperature,\n        }));\n    }\n\n    useEffect(() => {\n        client.state().then(remote => {\n            setRemoteState(remote);\n\n            client.sensor().then(condition => {\n                setCurrent(condition);\n            });\n\n            setLoading(false);\n        });\n    }, []);\n\n    if (loading) {\n        return <div>Please wait</div>;\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"Indicators\">\n                    <Indicator\n                        label=\"Temperature\"\n                        value={current ? current.temperature : 'N/A'}\n                        unit=\"°C\"\n                    />\n                    <Indicator\n                        label=\"Humidity\"\n                        value={current ? current.humidity : 'N/A'}\n                        unit=\"%\"\n                    />\n                </div>\n            </header>\n            <main className=\"App-main\">\n                <Drawer>\n                    {history.length === 0 ? (\n                        'Collecting data...'\n                    ) : (\n                        <Chart history={history} />\n                    )}\n                </Drawer>\n                <Remote\n                    onPowerChange={onPowerChange}\n                    onModeChange={onModeChange}\n                    onFanSpeedChange={onSpeedChange}\n                    onTemperatureChange={onTemperatureChange}\n                    state={remoteState}\n                ></Remote>\n            </main>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}