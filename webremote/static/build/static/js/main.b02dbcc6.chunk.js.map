{"version":3,"sources":["../external \"PropTypes\"","../external \"React\"","../external \"ObjectAssign\"","Indicator.tsx","Toggle.tsx","Remote.tsx","Client.ts","App.tsx","index.tsx","../external \"reactLifecyclesCompat\"","../external \"ReactDOM\""],"names":["module","exports","PropTypes","React","ObjectAssign","Indicator","label","value","unit","className","Toggle","children","Button","id","onChange","checked","type","e","target","htmlFor","Remote","onPowerChange","onModeChange","onFanSpeedChange","onTemperatureChange","state","power","mode","fan_speed","temperature","minTemp","useState","current_temperature","setTemperatureState","min","max","onAfterChange","trackStyle","backgroundColor","height","railStyle","handleStyle","border","width","marginLeft","marginTop","START_STATE","client","url_base","endpoint","json","url","this","options","method","headers","Accept","body","JSON","stringify","fetch","_post","speed","result","length","App","remoteState","setRemoteState","loading","setLoading","current","setCurrent","useEffect","then","remote","sensor","condition","humidity","on","off","fan","ReactDOM","render","document","getElementById","reactLifecyclesCompat"],"mappings":"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","file":"static/js/main.b02dbcc6.chunk.js","sourcesContent":["module.exports = PropTypes;","module.exports = React;","module.exports = ObjectAssign;","import React from \"react\";\r\nimport \"./Indicator.css\";\r\n\r\nconst Indicator: React.FC<{\r\n  label: string;\r\n  value: any;\r\n  unit: string;\r\n}> = ({ label, value, unit }) => {\r\n  return (\r\n    <div className=\"Indicator\">\r\n      <span className=\"Label\">{label}</span>\r\n      <span className=\"Value\">\r\n        <span>{value}</span>\r\n        <span className=\"Unit\">{unit}</span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicator;\r\n","import * as React from \"react\";\r\nimport PropTypes, { InferProps } from \"prop-types\";\r\nimport \"./Toggle.css\";\r\n\r\nexport default function Toggle({\r\n  children,\r\n  className\r\n}: InferProps<typeof Toggle.propTypes>) {\r\n  return <div className={`Toggle ${className || ''}`}>{children}</div>;\r\n}\r\n\r\nToggle.propTypes = {\r\n  children: PropTypes.any,\r\n  className: PropTypes.string\r\n};\r\n\r\nfunction Option({\r\n  id,\r\n  value,\r\n  children,\r\n  onChange,\r\n  checked\r\n}: InferProps<typeof Option.propTypes>) {\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"radio\"\r\n        value={value}\r\n        checked={checked || false}\r\n        onChange={e => {\r\n          if (e.target.checked) {\r\n            onChange(value);\r\n          }\r\n        }}\r\n        id={id}\r\n        className=\"Toggle-Option-Radio\"\r\n      />\r\n      <label htmlFor={id} className=\"Toggle-Option\">\r\n        {children}\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n  children: PropTypes.any,\r\n  onChange: PropTypes.func.isRequired,\r\n  checked: PropTypes.bool\r\n};\r\n\r\nToggle.Button = Option;\r\n","import React, { useState } from \"react\";\nimport \"./Remote.css\";\nimport Toggle from \"./Toggle\";\nimport { RemoteMode, RemoteFanSpeed, RemoteState } from \"./Client\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nexport const ACTION_PWR = \"power\";\nexport const ACTION_MODE = \"mode\";\n\nconst Remote: React.FC<{\n  onPowerChange: (power: boolean) => void;\n  onModeChange: (mode: RemoteMode) => void;\n  onFanSpeedChange: (fan_speed: RemoteFanSpeed) => void;\n  onTemperatureChange: (temperature: number) => void;\n  state: RemoteState;\n}> = ({\n  onPowerChange,\n  onModeChange,\n  onFanSpeedChange,\n  onTemperatureChange,\n  state\n}) => {\n  const { power, mode, fan_speed, temperature } = state;\n  const minTemp = mode === \"heater\" ? 20 : 22;\n  const maxTemp = 30;\n  const [current_temperature, setTemperatureState] = useState(temperature);\n\n  return (\n    <>\n      <Toggle className=\"Option-row\">\n        <Toggle.Button\n          id=\"pwr-on\"\n          value={true}\n          checked={power}\n          onChange={onPowerChange}\n        >\n          On\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"pwr-off\"\n          value={false}\n          checked={!power}\n          onChange={onPowerChange}\n        >\n          Off\n        </Toggle.Button>\n      </Toggle>\n\n      <Toggle className=\"Option-row\">\n        <Toggle.Button\n          id=\"mode-auto\"\n          value={\"auto\"}\n          checked={mode === \"auto\"}\n          onChange={onModeChange}\n        >\n          Auto\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"mode-cooler\"\n          value={\"cooler\"}\n          checked={mode === \"cooler\"}\n          onChange={onModeChange}\n        >\n          <i className=\"far fa-snowflake\"></i>\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"mode-heater\"\n          value={\"heater\"}\n          checked={mode === \"heater\"}\n          onChange={onModeChange}\n        >\n          <i className=\"fas fa-sun\"></i>\n        </Toggle.Button>\n      </Toggle>\n\n      <Toggle className=\"Option-row\">\n        <Toggle.Button\n          id=\"speed-auto\"\n          value={\"auto\"}\n          checked={fan_speed === \"auto\"}\n          onChange={onFanSpeedChange}\n        >\n          Auto\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"speed-high\"\n          value={\"high\"}\n          checked={fan_speed === \"high\"}\n          onChange={onFanSpeedChange}\n        >\n          <i className=\"fas fa-fan\"></i>\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"speed-low\"\n          value={\"low\"}\n          checked={fan_speed === \"low\"}\n          onChange={onFanSpeedChange}\n        >\n          <i className=\"fas fa-fan small\"></i>\n        </Toggle.Button>\n      </Toggle>\n\n      <div className=\"Option-row Option-row_slider\">\n        <Slider\n          min={minTemp}\n          max={maxTemp}\n          value={current_temperature}\n          onChange={setTemperatureState}\n          onAfterChange={onTemperatureChange}\n          trackStyle={{ backgroundColor: \"transparent\", height: 6 }}\n          railStyle={{\n            backgroundColor: \"#106d82\",\n            height: 6\n          }}\n          handleStyle={{\n            border: \"1px solid #106d82\",\n            height: 20,\n            width: 20,\n            marginLeft: 0,\n            marginTop: -7,\n            backgroundColor: \"white\"\n          }}\n        />\n        <div className=\"Target-temperature\">{current_temperature}°C</div>\n      </div>\n    </>\n  );\n};\n\nexport default Remote;\n","export default class Client {\r\n  url_base = \"/api/\";\r\n\r\n  _post(endpoint: string, json?: any) {\r\n    let url = this.url_base + endpoint;\r\n    let options: any = {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\"\r\n      }\r\n    };\r\n\r\n    if (json) {\r\n      options.body = JSON.stringify(json);\r\n    }\r\n\r\n    fetch(url, options);\r\n  }\r\n\r\n  off() {\r\n    this._post(\"off\");\r\n  }\r\n\r\n  on() {\r\n    this._post(\"on\");\r\n  }\r\n\r\n  mode(mode: RemoteMode) {\r\n    this._post(\"mode\", { mode });\r\n  }\r\n\r\n  fan(speed: RemoteFanSpeed) {\r\n    this._post(\"fan\", { speed });\r\n  }\r\n\r\n  temperature(temperature: number) {\r\n    this._post(\"temperature\", { temperature });\r\n  }\r\n\r\n  async sensor() {\r\n    const result = await fetch(this.url_base + \"get_sensor\");\r\n    const json = await result.json()\r\n    if (json.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    return json[0] as CurrentCondition\r\n  }\r\n\r\n  async state() {\r\n    const result = await fetch(this.url_base + \"state\");\r\n    return (await result.json()) as RemoteState;\r\n  }\r\n}\r\n\r\nexport type RemoteMode = \"auto\" | \"heater\" | \"cooler\";\r\nexport type RemoteFanSpeed = \"auto\" | \"high\" | \"low\";\r\n\r\nexport type RemoteState = {\r\n  mode: RemoteMode;\r\n  power: boolean;\r\n  fan_speed: RemoteFanSpeed;\r\n  temperature: number;\r\n};\r\n\r\nexport const START_STATE: RemoteState = {\r\n  mode: \"auto\",\r\n  power: false,\r\n  fan_speed: \"auto\",\r\n  temperature: 25\r\n};\r\n\r\nexport type CurrentCondition = {\r\n  temperature: number;\r\n  humidity: number;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Indicator from \"./Indicator\";\nimport Remote from \"./Remote\";\nimport Client, { RemoteMode, START_STATE, RemoteFanSpeed, CurrentCondition } from \"./Client\";\n\nconst client = new Client();\n\nconst App: React.FC = () => {\n  const [remoteState, setRemoteState] = useState(START_STATE);\n  const [loading, setLoading] = useState(true);\n  const [current, setCurrent] = useState<null | CurrentCondition>(null);\n\n  function onPowerChange(power: boolean) {\n    if (power) {\n      client.on();\n    } else {\n      client.off();\n    }\n\n    setRemoteState(state => ({\n      ...state,\n      power\n    }));\n  }\n\n  function onModeChange(mode: RemoteMode) {\n    client.mode(mode);\n\n    setRemoteState(state => ({\n      ...state,\n      mode\n    }));\n  }\n\n  function onSpeedChange(speed: RemoteFanSpeed) {\n    client.fan(speed);\n\n    setRemoteState(state => ({\n      ...state,\n      fan_speed: speed\n    }));\n  }\n\n  function onTemperatureChange(temperature: number) {\n    client.temperature(temperature);\n\n    setRemoteState(state => ({\n      ...state,\n      temperature: temperature\n    }));\n  }\n\n  useEffect(() => {\n    client.state().then(remote => {\n      setRemoteState(remote);\n\n      client.sensor().then(condition => {\n        setCurrent(condition)\n      })\n\n\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) {\n    return <div>Please wait</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Indicator label=\"Temperature\" value={current ? current.temperature : 'N/A'} unit=\"°C\" />\n        <Indicator label=\"Humidity\" value={current ? current.humidity : 'N/A'} unit=\"%\" />\n      </header>\n      <main className=\"App-main\">\n        <Remote\n          onPowerChange={onPowerChange}\n          onModeChange={onModeChange}\n          onFanSpeedChange={onSpeedChange}\n          onTemperatureChange={onTemperatureChange}\n          state={remoteState}\n        ></Remote>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = reactLifecyclesCompat;","module.exports = ReactDOM;"],"sourceRoot":""}