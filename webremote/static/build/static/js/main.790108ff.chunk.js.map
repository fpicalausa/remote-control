{"version":3,"sources":["Indicator.tsx","Toggle.tsx","Remote.tsx","Client.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Indicator","label","value","unit","className","Toggle","children","Button","id","onChange","checked","type","e","target","htmlFor","Remote","onPowerChange","onModeChange","onFanSpeedChange","state","power","mode","fan_speed","temperature","min","max","START_STATE","client","url_base","endpoint","json","url","this","options","method","headers","Accept","body","JSON","stringify","fetch","_post","speed","result","App","useState","remoteState","setRemoteState","loading","setLoading","humidity","current","useEffect","then","remote","on","off","fan","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAmBeA,G,YAZV,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACpB,OACE,yBAAKC,UAAU,aACb,0BAAMA,UAAU,SAASH,GACzB,0BAAMG,UAAU,SACd,8BAAOF,GACP,0BAAME,UAAU,QAAQD,O,YCTjB,SAASE,EAAT,GAG0B,IAFvCC,EAEsC,EAFtCA,SACAF,EACsC,EADtCA,UAEA,OAAO,uBAAKA,UAAS,iBAAYA,GAAa,KAAOE,GA4CvDD,EAAOE,OApCP,YAMyC,IALvCC,EAKsC,EALtCA,GACAN,EAIsC,EAJtCA,MACAI,EAGsC,EAHtCA,SACAG,EAEsC,EAFtCA,SACAC,EACsC,EADtCA,QAEA,OACE,gCACE,yBACEC,KAAK,QACLT,MAAOA,EACPQ,QAASA,IAAW,EACpBD,SAAU,SAAAG,GACJA,EAAEC,OAAOH,SACXD,EAASP,IAGbM,GAAIA,EACJJ,UAAU,wBAEZ,yBAAOU,QAASN,EAAIJ,UAAU,iBAC3BE,KCjCF,IA6FQS,EArFV,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,cAAeC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,iBAAkBC,EAAY,EAAZA,MAC7CC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,KAAMC,EAA2BH,EAA3BG,UAAWC,EAAgBJ,EAAhBI,YAEhC,OACE,oCACE,kBAAC,EAAD,CAAQnB,UAAU,cAChB,kBAAC,EAAOG,OAAR,CACEC,GAAG,SACHN,OAAO,EACPQ,QAASU,EACTX,SAAUO,GAJZ,MAQA,kBAAC,EAAOT,OAAR,CACEC,GAAG,UACHN,OAAO,EACPQ,SAAUU,EACVX,SAAUO,GAJZ,QAUF,kBAAC,EAAD,CAAQZ,UAAU,cAChB,kBAAC,EAAOG,OAAR,CACEC,GAAG,YACHN,MAAO,OACPQ,QAAkB,SAATW,EACTZ,SAAUQ,GAJZ,QAQA,kBAAC,EAAOV,OAAR,CACEC,GAAG,cACHN,MAAO,SACPQ,QAAkB,WAATW,EACTZ,SAAUQ,GAEV,uBAAGb,UAAU,sBAEf,kBAAC,EAAOG,OAAR,CACEC,GAAG,cACHN,MAAO,SACPQ,QAAkB,WAATW,EACTZ,SAAUQ,GAEV,uBAAGb,UAAU,iBAIjB,kBAAC,EAAD,CAAQA,UAAU,cAChB,kBAAC,EAAOG,OAAR,CACEC,GAAG,aACHN,MAAO,OACPQ,QAAuB,SAAdY,EACTb,SAAUS,GAJZ,QAQA,kBAAC,EAAOX,OAAR,CACEC,GAAG,aACHN,MAAO,OACPQ,QAAuB,SAAdY,EACTb,SAAUS,GAEV,uBAAGd,UAAU,gBAEf,kBAAC,EAAOG,OAAR,CACEC,GAAG,YACHN,MAAO,MACPQ,QAAuB,QAAdY,EACTb,SAAUS,GAEV,uBAAGd,UAAU,uBAIjB,yBAAKA,UAAU,cACb,2BAAOO,KAAK,SAASa,IAAK,GAAIC,IAAK,GAAIvB,MAAOqB,O,qCCvCzCG,EAA2B,CACtCL,KAAM,OACND,OAAO,EACPE,UAAW,OACXC,YAAa,I,yjBCnDf,IAAMI,EAAS,I,iDDLbC,SAAW,Q,kDAELC,EAAkBC,GACtB,IAAIC,EAAMC,KAAKJ,SAAWC,EACtBI,EAAe,CACjBC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mCAIhBN,IACFG,EAAQI,KAAOC,KAAKC,UAAUT,IAGhCU,MAAMT,EAAKE,K,4BAIXD,KAAKS,MAAM,S,2BAIXT,KAAKS,MAAM,Q,2BAGRpB,GACHW,KAAKS,MAAM,OAAQ,CAAEpB,W,0BAGnBqB,GACFV,KAAKS,MAAM,MAAO,CAAEC,Y,8JAICF,MAAMR,KAAKJ,SAAW,S,cAArCe,E,gBACQA,EAAOb,O,sJCmCVc,EAjEO,WAAO,IAAD,EACYC,mBAASnB,GADrB,mBACnBoB,EADmB,KACNC,EADM,OAEIF,oBAAS,GAFb,mBAEnBG,EAFmB,KAEVC,EAFU,OAGRJ,mBAAS,CAAEtB,YAAa,GAAI2B,SAAU,KAAjDC,EAHmB,oBA2C1B,OAPAC,qBAAU,WACRzB,EAAOR,QAAQkC,MAAK,SAAAC,GAClBP,EAAeO,GACfL,GAAW,QAEZ,IAECD,EACK,4CAIP,yBAAK5C,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAWH,MAAM,cAAcC,MAAOiD,EAAQ5B,YAAapB,KAAK,UAChE,kBAAC,EAAD,CAAWF,MAAM,WAAWC,MAAOiD,EAAQD,SAAU/C,KAAK,OAE5D,0BAAMC,UAAU,YACd,kBAAC,EAAD,CACEY,cAlDR,SAAuBI,GACjBA,EACFO,EAAO4B,KAEP5B,EAAO6B,MAGTT,GAAe,SAAA5B,GAAK,YACfA,EADe,CAElBC,cA0CIH,aAtCR,SAAsBI,GACpBM,EAAON,KAAKA,GAEZ0B,GAAe,SAAA5B,GAAK,YACfA,EADe,CAElBE,aAkCIH,iBA9BR,SAAuBwB,GACrBf,EAAO8B,IAAIf,GAEXK,GAAe,SAAA5B,GAAK,YACfA,EADe,CAElBG,UAAWoB,QA0BPvB,MAAO2B,OCtDGY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.790108ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Indicator.css\";\r\n\r\nconst Indicator: React.FC<{\r\n  label: string;\r\n  value: any;\r\n  unit: string;\r\n}> = ({ label, value, unit }) => {\r\n  return (\r\n    <div className=\"Indicator\">\r\n      <span className=\"Label\">{label}</span>\r\n      <span className=\"Value\">\r\n        <span>{value}</span>\r\n        <span className=\"Unit\">{unit}</span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicator;\r\n","import * as React from \"react\";\r\nimport PropTypes, { InferProps } from \"prop-types\";\r\nimport \"./Toggle.css\";\r\n\r\nexport default function Toggle({\r\n  children,\r\n  className\r\n}: InferProps<typeof Toggle.propTypes>) {\r\n  return <div className={`Toggle ${className || ''}`}>{children}</div>;\r\n}\r\n\r\nToggle.propTypes = {\r\n  children: PropTypes.any,\r\n  className: PropTypes.string\r\n};\r\n\r\nfunction Option({\r\n  id,\r\n  value,\r\n  children,\r\n  onChange,\r\n  checked\r\n}: InferProps<typeof Option.propTypes>) {\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"radio\"\r\n        value={value}\r\n        checked={checked || false}\r\n        onChange={e => {\r\n          if (e.target.checked) {\r\n            onChange(value);\r\n          }\r\n        }}\r\n        id={id}\r\n        className=\"Toggle-Option-Radio\"\r\n      />\r\n      <label htmlFor={id} className=\"Toggle-Option\">\r\n        {children}\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n  children: PropTypes.any,\r\n  onChange: PropTypes.func.isRequired,\r\n  checked: PropTypes.bool\r\n};\r\n\r\nToggle.Button = Option;\r\n","import React from \"react\";\nimport \"./Remote.css\";\nimport Toggle from \"./Toggle\";\nimport { RemoteMode, RemoteFanSpeed, RemoteState } from \"./Client\";\n\nexport const ACTION_PWR = \"power\";\nexport const ACTION_MODE = \"mode\";\n\nconst Remote: React.FC<{\n  onPowerChange: (power: boolean) => void;\n  onModeChange: (mode: RemoteMode) => void;\n  onFanSpeedChange: (mode: RemoteFanSpeed) => void;\n  state: RemoteState;\n}> = ({ onPowerChange, onModeChange, onFanSpeedChange, state }) => {\n  const { power, mode, fan_speed, temperature } = state;\n\n  return (\n    <>\n      <Toggle className=\"Option-row\">\n        <Toggle.Button\n          id=\"pwr-on\"\n          value={true}\n          checked={power}\n          onChange={onPowerChange}\n        >\n          On\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"pwr-off\"\n          value={false}\n          checked={!power}\n          onChange={onPowerChange}\n        >\n          Off\n        </Toggle.Button>\n      </Toggle>\n\n      <Toggle className=\"Option-row\">\n        <Toggle.Button\n          id=\"mode-auto\"\n          value={\"auto\"}\n          checked={mode === \"auto\"}\n          onChange={onModeChange}\n        >\n          Auto\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"mode-cooler\"\n          value={\"cooler\"}\n          checked={mode === \"cooler\"}\n          onChange={onModeChange}\n        >\n          <i className=\"far fa-snowflake\"></i>\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"mode-heater\"\n          value={\"heater\"}\n          checked={mode === \"heater\"}\n          onChange={onModeChange}\n        >\n          <i className=\"fas fa-sun\"></i>\n        </Toggle.Button>\n      </Toggle>\n\n      <Toggle className=\"Option-row\">\n        <Toggle.Button\n          id=\"speed-auto\"\n          value={\"auto\"}\n          checked={fan_speed === \"auto\"}\n          onChange={onFanSpeedChange}\n        >\n          Auto\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"speed-high\"\n          value={\"high\"}\n          checked={fan_speed === \"high\"}\n          onChange={onFanSpeedChange}\n        >\n          <i className=\"fas fa-fan\"></i>\n        </Toggle.Button>\n        <Toggle.Button\n          id=\"speed-low\"\n          value={\"low\"}\n          checked={fan_speed === \"low\"}\n          onChange={onFanSpeedChange}\n        >\n          <i className=\"fas fa-fan small\"></i>\n        </Toggle.Button>\n      </Toggle>\n\n      <div className=\"Option-row\">\n        <input type=\"Number\" min={22} max={30} value={temperature} />\n      </div>\n    </>\n  );\n};\n\nexport default Remote;\n","export default class Client {\r\n  url_base = \"/api/\";\r\n\r\n  _post(endpoint: string, json?: any) {\r\n    let url = this.url_base + endpoint;\r\n    let options: any = {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\"\r\n      }\r\n    };\r\n\r\n    if (json) {\r\n      options.body = JSON.stringify(json);\r\n    }\r\n\r\n    fetch(url, options);\r\n  }\r\n\r\n  off() {\r\n    this._post(\"off\");\r\n  }\r\n\r\n  on() {\r\n    this._post(\"on\");\r\n  }\r\n\r\n  mode(mode: RemoteMode) {\r\n    this._post(\"mode\", { mode });\r\n  }\r\n\r\n  fan(speed: RemoteFanSpeed) {\r\n    this._post(\"fan\", { speed });\r\n  }\r\n\r\n  async state() {\r\n    const result = await fetch(this.url_base + \"state\");\r\n    return (await result.json()) as RemoteState;\r\n    //return START_STATE;\r\n  }\r\n}\r\n\r\nexport type RemoteMode = \"auto\" | \"heater\" | \"cooler\";\r\nexport type RemoteFanSpeed = \"auto\" | \"high\" | \"low\";\r\n\r\nexport type RemoteState = {\r\n  mode: RemoteMode;\r\n  power: boolean;\r\n  fan_speed: RemoteFanSpeed;\r\n  temperature: number;\r\n};\r\n\r\nexport const START_STATE: RemoteState = {\r\n  mode: \"auto\",\r\n  power: false,\r\n  fan_speed: \"auto\",\r\n  temperature: 25\r\n};\r\n\r\nexport type CurrentCondition = {\r\n  temperature: number;\r\n  humidity: number;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Indicator from \"./Indicator\";\nimport Remote from \"./Remote\";\nimport Client, { RemoteMode, START_STATE, RemoteFanSpeed } from \"./Client\";\n\nconst client = new Client();\n\nconst App: React.FC = () => {\n  const [remoteState, setRemoteState] = useState(START_STATE);\n  const [loading, setLoading] = useState(true);\n  const [current] = useState({ temperature: 29, humidity: 51 });\n\n  function onPowerChange(power: boolean) {\n    if (power) {\n      client.on();\n    } else {\n      client.off();\n    }\n\n    setRemoteState(state => ({\n      ...state,\n      power\n    }));\n  }\n\n  function onModeChange(mode: RemoteMode) {\n    client.mode(mode);\n\n    setRemoteState(state => ({\n      ...state,\n      mode\n    }));\n  }\n\n  function onSpeedChange(speed: RemoteFanSpeed) {\n    client.fan(speed);\n\n    setRemoteState(state => ({\n      ...state,\n      fan_speed: speed\n    }));\n  }\n\n  useEffect(() => {\n    client.state().then(remote => {\n      setRemoteState(remote);\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) {\n    return <div>Please wait</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Indicator label=\"Temperature\" value={current.temperature} unit=\"°C\" />\n        <Indicator label=\"Humidity\" value={current.humidity} unit=\"%\" />\n      </header>\n      <main className=\"App-main\">\n        <Remote\n          onPowerChange={onPowerChange}\n          onModeChange={onModeChange}\n          onFanSpeedChange={onSpeedChange}\n          state={remoteState}\n        ></Remote>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}